
@article{evolutionsystemverilog,
	title = {The Evolution of {SystemVerilog}},
	volume = {20},
	issn = {0740-7475},
	url = {http://dx.doi.org/10.1109/MDT.2003.1214355},
	doi = {10.1109/MDT.2003.1214355},
	number = {4},
	urldate = {2013-05-03},
	journal = {{IEEE} Design Test of Computers},
	author = {Rich, David I.},
	month = jul,
	year = {2003},
	pages = {82--84},
	file = {IEEE Xplore Abstract Record:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/S8FT3MI4/articleDetails.html:text/html;IEEE Xplore Full Text PDF:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/CN7KTU8M/Rich - 2003 - The evolution of systemverilog.pdf:application/pdf}
},

@phdthesis{bluespecproc,
	title = {Designing a Processor in Bluespec},
	url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.84.6466&rep=rep1&type=pdf},
	abstract = {In this thesis, we designed a 2-way out-of-order processor in Bluespec implementing the {MIPS} I integer {ISA.} A number of scheduling optimizations were then used to bring the initial design up to the same level of cycle-level concurrency as found in standard {RTL-level} designs. From this, a general design methodology is proposed to effectively express, debug, and optimize large Bluespec designs.},
	school = {Master’s thesis, {MIT}},
	author = {Dave, Nirav Hemant},
	year = {2005},
	file = {Citeseer - Full Text PDF:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/N9GRMQAZ/Dave and Dave - 2005 - Designing a Processor in Bluespec.pdf:application/pdf;Citeseer - Snapshot:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/5W3WXRXH/summary.html:text/html;[PDF] from psu.edu:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/JDAH3CWE/Dave - 2005 - Designing a processor in Bluespec.pdf:application/pdf}
},

@phdthesis{koenthesis,
	type = {Doctoral thesis},
	title = {Embedded Languages for Describing and Verifying Hardware},
	url = {http://publications.lib.chalmers.se/publication/636},
	abstract = {Lava is a system for designing, specifying, verifying and implementing hardware. It is embedded in the functional programming language Haskell, which means that hardware descriptions are first-class objects in Haskell. We are thus able to use modern programming language features, such as higher-order functions, polymorphism, type classes and laziness, in hardware descriptions. {\textless}p /{\textgreater}We present two rather different versions of Lava. One version realises the embedding by using {\textless}I{\textgreater}monads{\textless}{/I{\textgreater}} to keep track of the information specified in a hardware description. The other version uses a new language construct, called observable sharing, which eliminates the need for monads so that descriptions are much cleaner. Adding {\textless}I{\textgreater}observable sharing{\textless}{/I{\textgreater}} to Haskell is a non-conservative extension, meaning that some properties of Haskell are lost. We thus investigate to what extent we are still allowed to use a normal Haskell compiler or interpreter. {\textless}p /{\textgreater}We also introduce an embedded language for specifying properties. The use of this language is two-fold. On the one hand, we can use it to specify and later formally verify properties of the described circuits. On the other hand, we can use it to specify and randomly test properties of normal Haskell programs. As a bonus, since hardware descriptions are embedded in Haskell, we can also use it to test our circuit descriptions. {\textless}p /{\textgreater}Further, we present a method for formal verification of safety properties of circuits, based on temporal induction. Temporal induction proves a property by proving it for the initial state (base case), and, by assuming it holds for a certain state, proving it also holds for the following states (step case). It is well-known that induction can be improved by strengthening the inductive hypothesis. We propose several techniques that can automatically strengthen a given property.},
	language = {English},
	urldate = {2013-03-28},
	school = {Chalmers University of Technology},
	author = {Claessen, Koen},
	year = {2001},
	keywords = {Hardware, Haskell, {HDL}, Lava},
	file = {Citeseer - Full Text PDF:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/289ZHN92/Claessen - 2001 - Embedded Languages for Describing and Verifying Ha.pdf:application/pdf;Citeseer - Snapshot:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/IAAZXV5W/summary.html:text/html;Snapshot:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/CRUUEF4S/636.html:text/html}
},


@inproceedings{awkwardsquad,
	title = {Tackling the awkward squad: monadic input/output, concurrency, exceptions, and foreign-language calls in Haskell},
	shorttitle = {Tackling the awkward squad},
	abstract = {Functional programming may be beautiful, but to write real applications we must grapple with awkward real-world issues: input/output, robustness, concurrency, and interfacing to programs written in other languages. These lecture notes give an overview of the techniques that have been developed by the Haskell community to address these problems. I introduce various proposed extensions to Haskell along the way, and I offer an operational semantics that explains what these extensions mean. This tutorial was given at the Marktoberdorf Summer School 2000. It will appears in the book {“Engineering} theories of software construction, Marktoberdorf Summer School 2000”, ed {CAR} Hoare, M Broy, and R Steinbrueggen, {NATO} {ASI} Series, {IOS} Press, 2001, pp47-96. This version has a few errors corrected compared with the published version. Change summary: Apr 2005: some examples added to Section 5.2.2, to clarifyevaluate. March 2002: substantial revision 1},
	booktitle = {Engineering theories of software construction},
	publisher = {Press},
	author = {Jones, Simon Peyton},
	year = {2001},
	pages = {47–96},
	file = {Citeseer - Full Text PDF:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/F95WEEA5/Jones - 2001 - Tackling the awkward squad monadic inputoutput, .pdf:application/pdf;Citeseer - Snapshot:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/GX29J7DK/summary.html:text/html}
},

@inproceedings{historyhaskell,
	title = {A history of Haskell: Being lazy with class},
	shorttitle = {A history of Haskell},
	url = {http://dl.acm.org/citation.cfm?id=1238856},
	abstract = {This paper describes the history of Haskell, including its genesis and principles, technical contributions, implementations and tools, and applications and impact. 1.},
	booktitle = {Proceedings of the third {ACM} {SIGPLAN} conference on History of programming languages},
	publisher = {{ACM} Press},
	author = {Hudak, Paul and Hughes, John and Jones, Simon Peyton and Wadler, Philip},
	year = {2007},
	keywords = {Bluespec},
	pages = {1–55},
	annote = {Reference for Bluespec origin.},
	file = {Citeseer - Full Text PDF:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/88SBNCNS/Hudak et al. - 2007 - A history of Haskell Being lazy with class.pdf:application/pdf;Citeseer - Snapshot:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/5Q27P8Z2/summary.html:text/html;history.pdf:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/3IR78CF3/history.pdf:application/pdf}
},

@inproceedings{bluehive,
	title = {Bluehive-A field-programable custom computing machine for extreme-scale real-time neural network simulation},
	url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6239804},
	urldate = {2013-04-20},
	booktitle = {Field-Programmable Custom Computing Machines ({FCCM)}, 2012 {IEEE} 20th Annual International Symposium on},
	author = {Moore, Simon W. and Fox, Paul J. and Marsh, Steven {JT} and Markettos, A. Theodore and Mujumdar, Alan},
	year = {2012},
	keywords = {Bluespec, Hardware},
	pages = {133–140},
	file = {[PDF] from cam.ac.uk:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/B3Q9GIKJ/Moore et al. - 2012 - Bluehive-A field-programable custom computing mach.pdf:application/pdf;Snapshot:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/RSPBWE8V/login.html:text/html}
},

@inproceedings{kansaslava,
	address = {New York, {NY}, {USA}},
	series = {Haskell '09},
	title = {Type-safe observable sharing in Haskell},
	isbn = {978-1-60558-508-6},
	url = {http://doi.acm.org/10.1145/1596638.1596653},
	doi = {10.1145/1596638.1596653},
	abstract = {Haskell is a great language for writing and supporting embedded Domain Specific Languages ({DSLs).} Some form of observable sharing is often a critical capability for allowing so-called deep {DSLs} to be compiled and processed. In this paper, we describe and explore uses of an {IO} function for reification which allows direct observation of sharing.},
	urldate = {2013-05-17},
	booktitle = {Proceedings of the 2nd {ACM} {SIGPLAN} symposium on Haskell},
	publisher = {{ACM}},
	author = {Gill, Andy},
	year = {2009},
	pages = {117–128},
	file = {ACM Full Text PDF:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/RNBQ6ZQQ/Gill - 2009 - Type-safe observable sharing in Haskell.pdf:application/pdf}
},

@inproceedings{xilinxlava,
	title = {Death of the {RLOC?}},
	doi = {10.1109/FPGA.2000.903401},
	abstract = {{“RLOC”} is the name given to a relational placement macro that is used to influence the layout of circuits that are realised on {FPGAs} using Xilinx's place and route software. This paper explores the thesis that modern {FPGA} architectures are powerful enough to no longer require the designer to provide a layout and that simulated annealing technology has advanced to the point that very good results can be obtained using no layout constraints at all. If this thesis is true then there is a profound effect on custom computing machines which can be more easily targeted from high level specification languages like Handle-C and {JHDL} without requiring clumsy layout information to be accommodated at the language level},
	booktitle = {2000 {IEEE} Symposium on Field-Programmable Custom Computing Machines},
	author = {Singh, S.},
	year = {2000},
	pages = {145--152},
	file = {IEEE Xplore Abstract Record:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/7VVGFRP7/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/I789PU4T/Singh - 2000 - Death of the RLOC.pdf:application/pdf}
},

@book{yorklava,
	title = {The Reduceron Reconfigured},
	abstract = {The leading implementations of graph reduction all target conventional processors designed for low-level imperative execution. In this paper, we present a processor specially designed to perform graph-reduction. Our processor – the Reduceron – is implemented using off-the-shelf reconfigurable hardware. We highlight the lowlevel parallelism present in sequential graph reduction, and show how parallel memories and dynamic analyses are used in the Reduceron to achieve an average reduction rate of 0.55 function applications per clock-cycle. Categories and Subject Descriptors C.1.3 [Processor Architectures]: Other Architecture {Styles—High-level} language architectures;},
	author = {Naylor, Matthew and Runciman, Colin},
	file = {Citeseer - Full Text PDF:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/5FKGQNJ5/Naylor and Runciman - The Reduceron Reconfigured.pdf:application/pdf;Citeseer - Snapshot:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/GE6BXBI8/summary.html:text/html}
},

@article{pprint,
	title = {{PPrint}, a prettier printer},
	volume = {10},
	url = {http://research.microsoft.com/en-us/um/people/daan/download/pprint/pprint-letter.pdf},
	urldate = {2013-05-17},
	journal = {University of Utrecht},
	author = {Leijen, Daan},
	year = {2001},
	file = {[PDF] from microsoft.com:/home/aninhumer/.mozilla/firefox/mwad0hks.default/zotero/storage/JDI74VT6/Leijen - 2001 - PPrint, a prettier printer.pdf:application/pdf}
}
